#EJERCICIO 14: Sum Numbers
#In a given text you need to sum the numbers while excluding any digits that form part of a word.
#The text consists of numbers, spaces and letters from the English alphabet.
#Input: A string.
#Output: An int.
#ANALISIS: #una vez dividido evluar si cada palabra es numero, si es asi, incorporarla a append y sumar.

def sum_numbers(text: str) -> int:
    # your code here
    a = text.split()
    b = [int(i) for i in a if i.isnumeric() == True] 
    return sum(b) 
#________________________________________________________________________________________________________________________   
#EJERCICIO 15:
#You are given an array of integers. You should find the sum of the integers with even indexes (0th, 2nd, 4th...). 
#Then multiply this summed number and the final element of the array together. 
#Don't forget that the first element has an index of 0.

def checkio(array: list) -> int:
    b = [array[i] for i in range(0, len(array), 2)]
    c = array = 0 if len(array) == 0 else array[-1]
    return sum(b) * c    
#________________________________________________________________________________________________________________________ 
#EJERCICIO 16: Detect three words in succesion.
#You are given a string with words and numbers separated by whitespaces (one space). The words contains only letters. You should check if the string contains three words in succession . For example, the string "start 5 one two three 7 end" contains three words in succession.
    
def checkio(words: str) -> bool:  
    b = words.split()
    detecta_pal = [0 if i.isnumeric() == True else 1 for i in b]
    three_words = [1 if detecta_pal[j] + detecta_pal[j+1] + detecta_pal[j+2] == 3 else 0 for j in range(0, len(detecta_pal)-2)]
    return False if len(detecta_pal) < 3 or sum(three_words) < 1 else True 
#________________________________________________________________________________________________________________________ 
#EJERCICIO 17:  you should replace all cases of the words "right" with the word "left", even if it's a part of another word
def left_join(phrases: tuple) -> str:
    text = ','.join(phrases)                    #Une todos los elementos en un string  separados por coma (para poder utilizar find)
    while text.find('right') != -1:             #Cuendo se encuentre la palabra -1(no se encuentra)
        text = text.replace('right', 'left')    #Reemplacelas y las almacena como text
    return text
#________________________________________________________________________________________________________________________ 
#EJERCICIO 18: First Word
#When solving a task pay attention to the following points:
#There can be dots and commas in a string.
#A string can start with a letter or, for example, a dot or space.
#A word can contain an apostrophe and it's a part of a word.
#The whole text can be represented with one word and that's it.
#first_word = lambda t: ''.join([x, ' '][x in '.,'] for x in t).split()[0]
#Estrategia: Reconocer solo letras con isalpha. Obtener la primera con [0]

def first_word(text: str) -> str:
    # your code here
    a = [i if i.isalpha() or i == "'" else ' ' for i in text]   #separa todas los caracteres(con i). Reemplaza lo que no es letra o apostrofe lo reemplaza por 
    b = str(''.join(a))                                         #The join() method takes all items in an iterable and joins them into one string. A string must be specified as the separator.
    c = b.split()[0]                                            #Separa la primera "palabra"    
    return c
#________________________________________________________________________________________________________________________ 
#EJERCICIO 19: Days Between
#Dates between 1 january 1 and 31 december 9999. Dates are correct.

import datetime                          #Requiere importar para tener el calendario (y contar cuantos dias tiene cada mes etc)

def days_diff(a, b):                     #Requiere importar para tener el calendario (y contar cuantos dias tiene cada mes etc)
    # your code here       
    fecha1 = datetime.date(a[0], a[1], a[2]) #Esto reemplaza hacia d1 = datetime.date(*fecha1)
    fecha2 = datetime.date(b[0], b[1], b[2]) #Esto reemplaza hacia d2 = datetime.date(*fecha2)
    
    return abs(fecha1-fecha2).days
#________________________________________________________________________________________________________________________ 
#EJERCICIO 20: Count Digits

def count_digits(text: str) -> int:
    # your code here
    #b = [1 for i in text if i.isdigit() == True]    #Genera lista si hay numeros dentro del array. Con len cuento los elementos de la lista.
    return sum([1 for i in text if i.isdigit() == True])
#________________________________________________________________________________________________________________________ 
#EJERCICIO 21: Backward Each Word: 
#In a given string you should reverse every word, but the words should stay in their places.

def backward_string_by_word(text: str) -> str:
    # your code here
    return ' '.join([i[::-1] for i in text.split(' ')])  #divide texto en palabras respetando espacios, recorre i para justar en reversa separado por espacio ' '
#________________________________________________________________________________________________________________________ 
#EJERCICIO 22: Bigger Price
#You have a table with all available goods in the store. The data is represented as a list of dicts
#Your mission here is to find the TOP most expensive goods. 
#The amount we are looking for will be given as a first argument and the whole data as the second one
#Input: int and list of dicts. Each dicts has two keys "name" and "price"
#Output: the same as the second Input argument.

import operator                    #Importe operator que me permite hacer sort por la columna price y filtrado en la cant de resultado limit

def bigger_price(limit: int, data: list) -> list:
    # your code here
    return sorted(data, key=operator.itemgetter("price"), reverse=True)[0:limit]  
#________________________________________________________________________________________________________________________ 
#EJERCICIO 23: Between Markers
#https://py.checkio.org/en/mission/between-markers/
#You are given a string and two markers (the initial and final). 
#You have to find a substring enclosed between these two markers. 
#But there are a few important conditions:
#The initial and final markers are always different.
#If there is no initial marker, then the first character should be considered the beginning of a string.
#If there is no final marker, then the last character should be considered the ending of a string.
#If the initial and final markers are missing then simply return the whole string.
#If the final marker comes before the initial marker, then return an empty string.
#Input: Three arguments. All of them are strings. The second and third arguments are the initial and final markers.
#Output: A string.
#Ejemplos:
#between_markers('What is >apple<', '>', '<') == 'apple'
#between_markers('No[/b] hi', '[b]', '[/b]') == 'No'


#________________________________________________________________________________________________________________________ 
