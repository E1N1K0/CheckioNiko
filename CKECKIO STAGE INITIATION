STAGE: INITIATION

#EJERCICIO 1: Multiply (Intro)
def mult_two(a: int, b: int) -> int:
    # your code here
    return a*b
#__________________________________________________________________________________________________________
#EJERCICIO 2: You have a positive integer. Try to find out how many digits it has?
#Analisis: 

def number_length(a: int) -> int:
    # your code here:
    cadena = str(a)
    return len(cadena)
#__________________________________________________________________________________________________________
#EJERCICIO 3:
#https://py.checkio.org/en/mission/end-zeros/
#Try to find out how many zeros a given number has at the end.
#Alternativa dividiendo por 10 y agregar exp de n:

def end_zeros(num: int) -> int:
    # your code here
    if num == 0:              #Parte del primer cero, si lo hay.
        return 1              # si es asi, entrega 1.
    elif num%10 == 0:         #Además, si es divisible por 10
        n = 0                 #Parte con n=0.
        while num%10**n == 0: #Exponencial de 10 ** n
            n += 1            #Contador de n (si es divisible de 10, es 1)
        return n-1            #No cache por que pero resulto...
    else:
        return 0              #Si el primero numero es distinto de cero es 0.
    return None
#__________________________________________________________________________________________________________
#EJERCICIO 4:
#You should return a given string in reverse order.
#Ejemplo: backward_string('123456789') == '987654321'
#Analisis: usar [::-1]

def backward_string(val: str) -> str:
    # your code here
    lav = val[::-1]
    return lav  
#__________________________________________________________________________________________________________
#EJERCICIO 5:
#For the illustration we have a list [1, 2, 3, 4, 5] and we need to remove all elements that go before 3 - which is 1 and 2.
#We have two edge cases here: (1) if a cutting element cannot be found, then the list shoudn't be changed. (2) if the list is empty, then it should remain empty.

def remove_all_before(items: list, border: int) -> Iterable:

    hay = items.count(border)          #cuenta cuantas veces aparece border
    maximo = len(items)                #largo de la lista.   
    
    if hay == 0:                       #Si border no esta en la lista
        return items                   #Devuelva la lista
    
    elif maximo == 0:                  #Si la lista tiene lingitud 0
        return []                      #Devuelva []
    
    else:                              #En caso de que las alternativas anteriores no ocurran:
        minimo = items.index(border)   #ubicacion del numero dado en la lista (si esto se codifica antes, arrojara error por que 2 no aparece en una de las listas).
        return items[minimo:maximo]    #Devuelva la lista con los elementos menos los removidos.

    return None
#__________________________________________________________________________________________________________
#EJERCICIO 6: Check if a given string has all symbols in upper case. If the string is empty or doesn't have any letter in it - function should return True.
#Analisis:
#mayusculas = len([c for c in texto if c.isupper()])
#minusculas = len([c for c in texto if c.islower()])
#numeros = len([c for c in texto if c.isdigit()])

def is_all_upper(text: str) -> bool:
    # your code here:
    minusculas = len([c for c in text if c.islower()])   #Busca (cuenta) minusculas en el texto.    
    if minusculas > 0:                                   #Si encuentra alguna minuscula retorna False
        return False
    else:                                                #Si no encuentra minusculas, retorna True
        return True  
    return False
#__________________________________________________________________________________________________________
#EJERCICIO 7: In a given list the first element should become the last one. 
#An empty list or list with only one element should stay the same.
#ANALISIS: Uso de array.

from typing import Iterable
def replace_first(items: list) -> Iterable:
    # your code here:
    try:
        items.append(items[0])           #Agrega el primer item  al final de la lista.
        del items[0]                     #Borra el primer item de la lista
        return items    
    except:
        return items
#__________________________________________________________________________________________________________
#EJERCICIO 8: You have a number and you need to determine which digit in this number is the biggest.
#ANALISIS: Separar el numero en sus caracteres para convertirlo en una lista y elegir el mayor.

def max_digit(number: int) -> int:
    # your code here:
    number_text = str(number)
    num_int = [int(i) for i in number_text]
    return max(num_int)
#__________________________________________________________________________________________________________
#EJERCICIO 9: Split the string into pairs of two characters. If the string contains an odd number of characters, then the missing second character of the final pair should be replaced with an underscore ('_').
#split_pairs('abcd') == ['ab', 'cd']
#split_pairs('abc') == ['ab', 'c_']
#Analisis: 
#Contar elementos de la lista
#[y+2:] + e
#si es impar => len()/2 =! 0 => e = + append _  [x for x in range(1,11) if x % 2 != 0]
#else e = 0

def split_pairs(a):
    # your code here:
    n = 2                                           #cantidad de caracteres por elemento de la lista
    if len(a) % 2 == 1:                             #si len de a es impar:
        cadena_impar = "".join([a, '_'])            #la cadena lleva '_'
        w = [cadena_impar[i:i+n] for i in range(0, len(cadena_impar), n)]
        return w
    else:
        w = [a[i:i+n] for i in range(0, len(a), n)]
        return w
#__________________________________________________________________________________________________________
#EJERCICIO 10: You have a string that consist only of digits. You need to find how many zero digits ("0") are at the beginning of the given string.
#https://py.checkio.org/en/mission/beginning-zeros/
    
def beginning_zeros(number: str) -> int:
    # your code here
    count = 0   
    for n in number:            #hace recorrer n
        if int(n) == 0:         #Si en un n detecta que el elmento es cero
            count += 1          #Cuenta 1 mas
        else:
            return count        #retorna el contador
    return count                #retorna el contador
#__________________________________________________________________________________________________________
#EJERCICIO 11: You are given a list of values as set form and a value for which you need to find the nearest one.
#nearest_value({4, 7, 10, 11, 12, 17}, 9) == 10
#nearest_value({4, 7, 10, 11, 12, 17}, 8) == 7
#A few clarifications:
#If 2 numbers are at the same distance, you need to choose the smallest one;
#The set of numbers is always non-empty, i.e. the size is >=1;
#The given value can be in this set, which means that it’s the answer;
#The set can contain both positive and negative numbers, but they are always integers;
#The set isn’t sorted and consists of unique numbers.

def nearest_value(values, one):
    cercano = None
    cercano_dist = None
    for i in values:
        dist = (i - one)**2                                #Genera distancia. al cuadrado reemplaza abs!
        if cercano_dist is None or dist < cercano_dist:    #Si no hay  elementos o la distancia es menor al las cercano
            cercano = i                                    #recorre cercano al iesimo elemento de values
            cercano_dist = dist                            #deja constante
        elif dist == cercano_dist:                         #cuando ambas distancias sean =s. eliga el minimo entre el elemento i y el cercano
            cercano = min(i, cercano)
    return cercano
#__________________________________________________________________________________________________________
#EJERCICIO 11: 
#You are given a string and two markers (the initial one and final). You have to find a substring enclosed between these two markers. But there are a few important conditions.
#This is a simplified version of the Between Markers mission.
#The initial and final markers are always different.
#The initial and final markers are always 1 char size.
#The initial and final markers always exist in a string and go one after another.
#Input: Three arguments. All of them are strings. The second and third arguments are the initial and final markers.
#Output: A string.
#return text[text.index(begin)+1:text.index(end)]

def between_markers(text: str, begin: str, end: str) -> str:
    """
        returns substring between two given markers
    """
    # your code here
    a = text.find(begin)
    b = text.find(end)
    c = text[a+1:b]
        
    return c
#__________________________________________________________________________________________________________
#EJERCICIO 12: For the input of your function, you will be given one sentence. You have to return a corrected version, that starts with a capital letter and ends with a period (dot).
#Pay attention to the fact that not all of the fixes are necessary. If a sentence already ends with a period (dot), then adding another one will be a mistake.
#Input: A string.
#Output: A string.
#return text[0].upper() + text[1:] + ("." if text[-1] != "." else "")

def correct_sentence(text: str) -> str:
    """
        returns a corrected sentence which starts with a capital letter
        and ends with a dot.
    """
    # your code here
    # Buscar primer caracter y reemplazar por capital.
    primer = text[0]
    Upper = primer.capitalize()
    text = text.replace(text[0], Upper, 1)
    # Buscar ultimo caracter, si no tiene punto agregarlo.
    ultima = text[-1]
    Punto = '.'
    if ultima != Punto:
        #return print('agrega punto')
        return text + Punto
    return text
#__________________________________________________________________________________________________________    
#EJERCICIO 13: Check if the given number is even or not. Your function should return True if the number is even, and False if the number is odd.
#https://py.checkio.org/en/mission/is-even/

#return num & 1 == 0

def is_even(num: int) -> bool:
    # your code here
    return False if num % 2 != 0 else True
#__________________________________________________________________________________________________________
Fin de la etapa!
